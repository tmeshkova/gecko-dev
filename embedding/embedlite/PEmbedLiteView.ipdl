/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

include protocol PEmbedLiteApp;

include "ipc/nsGUIEventIPC.h";
include "ipc/InputDataIPC.h";
include "mozilla/GfxMessageUtils.h";
using struct gfxSize from "gfxPoint.h";
using gfxRect from "mozilla/GfxMessageUtils.h";
using CSSRect from "Units.h";
using CSSSize from "Units.h";
using struct gfxPoint from "gfxPoint.h";
using struct nsIntPoint from "nsPoint.h";
using struct mozilla::layers::FrameMetrics from "FrameMetrics.h";
using struct mozilla::layers::ScrollableLayerGuid from "FrameMetrics.h";
using FrameMetrics::ViewID from "FrameMetrics.h";
using nscolor from "nsColor.h";
using class mozilla::WidgetKeyboardEvent from "ipc/nsGUIEventIPC.h";
using class mozilla::WidgetMouseEvent from "ipc/nsGUIEventIPC.h";
using MultiTouchInput from "InputData.h";
using mozilla::CSSIntPoint from "Units.h";
using struct mozilla::layers::ZoomConstraints from "FrameMetrics.h";

namespace mozilla {
namespace embedlite {

prio(normal upto urgent) sync protocol PEmbedLiteView {
    manager PEmbedLiteApp;
child:
    LoadURL(nsString url);
    GoBack();
    GoForward();
    StopLoad();
    Reload(bool hardReload);
    LoadFrameScript(nsString uri);
    SetViewSize(gfxSize aSize);
    SetGLViewSize(gfxSize aSize);
    SetIsActive(bool aIsActive);
    SetIsFocused(bool aIsFocused);
    SetThrottlePainting(bool aThrottle);
    SuspendTimeouts();
    ResumeTimeouts();
    AsyncScrollDOMEvent(gfxRect contentRect, gfxSize scrollSize);

    UpdateFrame(FrameMetrics frame) compress;
    HandleDoubleTap(nsIntPoint point);
    HandleSingleTap(nsIntPoint point);
    HandleLongTap(nsIntPoint point, ScrollableLayerGuid aGuid, uint64_t aInputBlockId);
    AcknowledgeScrollUpdate(ViewID aScrollId, uint32_t aScrollGeneration);
    HandleTextEvent(nsString commit, nsString preEdit);
    HandleKeyPressEvent(int domKeyCode, int gmodifiers, int charCode);
    HandleKeyReleaseEvent(int domKeyCode, int gmodifiers, int charCode);
    MouseEvent(nsString aType, float aX, float aY,
               int32_t aButton, int32_t aClickCount,
               int32_t aModifiers, bool aIgnoreRootScrollFrame);

    InputDataTouchEvent(ScrollableLayerGuid aGuid, MultiTouchInput event, uint64_t aInputBlockId);
    // We use a separate message for touchmove events only to apply
    // compression to them.
    InputDataTouchMoveEvent(ScrollableLayerGuid aGuid, MultiTouchInput event, uint64_t aInputBlockId) compress;
    AddMessageListener(nsCString name);
    RemoveMessageListener(nsCString name);
    AddMessageListeners(nsString [] messageNames);
    RemoveMessageListeners(nsString [] messageNames);

    Destroy();

parent:
    Initialized();
     __delete__();

    OnLocationChanged(nsCString aLocation, bool aCanGoBack, bool aCanGoForward);
    OnLoadStarted(nsCString aLocation);
    OnLoadFinished();
    OnLoadRedirect();
    OnLoadProgress(int32_t aProgress, int32_t aCurTotal, int32_t aMaxTotal);
    OnSecurityChanged(nsCString aStatus, uint32_t aState);
    OnFirstPaint(int32_t aX, int32_t aY);
    OnScrolledAreaChanged(uint32_t aWidth, uint32_t aHeight);
    OnScrollChanged(int32_t offSetX, int32_t offSetY);
    OnTitleChanged(nsString aTitle);
    OnWindowCloseRequested();

    /**
     * Updates the zoom constraints for a scrollable frame in this tab.
     * The zoom controller code lives on the parent side and so this allows it to
     * have up-to-date zoom constraints.
     */
    UpdateZoomConstraints(uint32_t aPresShellId, ViewID aViewId, bool aIsRoot,
                          ZoomConstraints aConstraints);

    /**
     * Instructs the EmbedLiteViewThreadParent to forward a request to zoom to a rect given in
     * CSS pixels. This rect is relative to the document.
     */
    ZoomToRect(uint32_t aPresShellId, ViewID aViewId, CSSRect aRect);
    SetBackgroundColor(nscolor color);
    ContentReceivedInputBlock(ScrollableLayerGuid aGuid, uint64_t aInputBlockId, bool aPreventDefault);
    sync GetGLViewSize()
      returns (gfxSize aSize);

    /*
     * Gets the DPI of the screen corresponding to this view.
     */
    sync GetDPI() returns (float value);

    sync SyncMessage(nsString aMessage, nsString aJSON)
      returns (nsString[] retval);

    prio(high) sync RpcMessage(nsString aMessage, nsString aJSON)
      returns (nsString[] retval);

    // IME
    sync GetInputContext() returns (int32_t IMEEnabled, int32_t IMEOpen,
                                    intptr_t NativeIMEContext);

    SetInputContext(int32_t IMEEnabled,
                    int32_t IMEOpen,
                    nsString type,
                    nsString inputmode,
                    nsString actionHint,
                    int32_t cause,
                    int32_t focusChange);

both:
    AsyncMessage(nsString aMessage, nsString aData);
};

}}
